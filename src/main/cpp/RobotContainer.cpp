// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

#include "RobotContainer.h"

#include <frc2/command/ParallelRaceGroup.h>
#include <frc2/command/RunCommand.h>
#include <frc/smartdashboard/SmartDashboard.h>

RobotContainer* RobotContainer::m_robotContainer = NULL;

//RobotContainer::RobotContainer() {
// TODO: DELETE???
RobotContainer::RobotContainer() : m_autonomousCommand(&m_swerve, &m_climber, &m_shooter, &m_intake, &m_vision) {
    //TODO broken????? frc::SmartDashboard::PutData(&m_swerve);
    frc::SmartDashboard::PutData(&m_climber);
    frc::SmartDashboard::PutData(&m_shooter);
    frc::SmartDashboard::PutData(&m_intake);
    frc::SmartDashboard::PutData(&m_vision);

    // SmartDashboard Buttons
    frc::SmartDashboard::PutData("Autonomous Command", new AutonomousCommand(&m_swerve, &m_climber, &m_shooter, &m_intake, &m_vision));
	
    ConfigureButtonBindings();








    // Set up default drive command
    //TODO delete??? m_drive.SetDefaultCommand(frc2::RunCommand(
    //TODO delete???     [this]
    //TODO delete???     {
    //TODO delete???         m_drive.Motivate(
    //TODO delete???             m_joystick.GetY(),
    //TODO delete???             m_joystick.GetX());
    //TODO delete???     },
    //TODO delete???      {&m_drive}));
//TODO delete??? 
    //TODO delete??? m_chooser.SetDefaultOption("Autonomous Command", new AutonomousCommand(&m_swerve, &m_climber, &m_shooter, &m_intake, &m_vision));
    //TODO delete??? frc::SmartDashboard::PutData("Auto Mode", &m_chooser);
}

RobotContainer* RobotContainer::GetInstance() {
    if (m_robotContainer == NULL) {
        m_robotContainer = new RobotContainer();
    }
    return(m_robotContainer);
}

void RobotContainer::ConfigureButtonBindings() {
//frc2::JoystickButton m_controllerButton1{&m_controller, (int)frc::XboxController::Button::kA};           //  (1)
frc2::JoystickButton m_controllerButton2{&m_controller, (int)frc::XboxController::Button::kB};           // Climber Raise (2)
frc2::JoystickButton m_controllerButton3{&m_controller, (int)frc::XboxController::Button::kX};           // Climber Lower (3)
frc2::JoystickButton m_controllerButton4{&m_controller, (int)frc::XboxController::Button::kY};           // Shooter Shoot (4)
frc2::JoystickButton m_controllerButton5{&m_controller, (int)frc::XboxController::Button::kLeftBumper};  // Intake Run (5)
frc2::JoystickButton m_controllerButton6{&m_controller, (int)frc::XboxController::Button::kRightBumper}; // Intake Expel (6)

//frc2::JoystickButton m_controllerButton7{&m_controller, (int)frc::XboxController::Button::kBack};        // Compressor Enable (7)
//frc2::JoystickButton m_controllerButton8{&m_controller, (int)frc::XboxController::Button::kStart};       // Cam Backwards (8)

m_controllerButton2.WhileTrue(ClimberRaiseCommand(&m_climber).ToPtr());               // Climber Raise (2)
m_controllerButton4.WhileTrue(ShooterShootCommand(&m_shooter).ToPtr());              // Shooter Shoot (4)
//m_controllerButton1.WhileTrue(sssssssCommand(&m_shooter).ToPtr());             //  (1)
m_controllerButton3.WhileTrue(ClimberLowerCommand(&m_climber).ToPtr());              // Climber Lower (3)
m_controllerButton5.OnTrue(IntakeRunCommand(&m_intake).ToPtr());           // Intake Run (5)
m_controllerButton6.OnTrue(IntakeExpelCommand(&m_intake).ToPtr());            // Intake Expel (6)

//m_controllerButton7.ToggleOnTrue(CompressorEnableCommand(&m_grabber).ToPtr()); // Compressor Enable (7)
//m_controllerButton8.OnTrue(CamBackwardsCommand(&m_drive).ToPtr());       // Cam Backwards (8)
}

frc::Joystick* RobotContainer::getJoystick() {
   return &m_drivecontroller;
}
frc::XboxController* RobotContainer::getController() {
   return &m_controller;
}

frc2::Command* RobotContainer::GetAutonomousCommand() {
  // The selected command will be run in autonomous
  //TODO broken???    return m_chooser.GetSelected();
}