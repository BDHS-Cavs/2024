// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "subsystems/Vision.h"

#include <frc/smartdashboard/SmartDashboard.h>
#include <wpi/raw_ostream.h> // for wpi outs()

Vision::Vision(){
    SetName("Vision");
    SetSubsystem("Vision");
}

void Vision::Periodic() {
    // Put code here to be run every loop
    photon::PhotonPipelineResult result = camera.GetLatestResult();;
    bool hasTargets = result.HasTargets();
    double yaw;
    double pitch;
    double area;
    double skew;
    int apriltagID;

    if(hasTargets)
    {
        photon::PhotonTrackedTarget target = result.GetBestTarget();
        double yaw = target.GetYaw();
        double pitch = target.GetPitch();
        double area = target.GetArea();
        double skew = target.GetSkew();
        int apriltagID = target.GetFiducialId();
    }

    else
    {
        //do nothing
    }

    frc::SmartDashboard::PutBoolean("Has AprilTag Targets", hasTargets);
    frc::SmartDashboard::PutNumber("AprilTag Yaw", yaw);
    frc::SmartDashboard::PutNumber("AprilTag Pitch", pitch);
    frc::SmartDashboard::PutNumber("AprilTag Area", area);
    frc::SmartDashboard::PutNumber("AprilTag Skew", skew);
    frc::SmartDashboard::PutNumber("AprilTag ID", apriltagID);
}

void Vision::SimulationPeriodic() {
}

// Put methods for controlling this subsystem here and call from commands

//void Vision::VisionScan(){ 
//        photon::PhotonPipelineResult result = camera.GetLatestResult();
//        photon::PhotonTrackedTarget target = result.GetBestTarget();
//        frc::SmartDashboard::PutBoolean("Photon HasTargets", result.HasTargets());
//} 
//
//void Vision::VisionTrack(){
//        VisionScan();
//        if (result.HasTargets()) {
//            frc::SmartDashboard::PutNumber("PhotonVision Target ID", target.GetFiducialId());
//        }
//}