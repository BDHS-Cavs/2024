// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "subsystems/Vision.h"

#include <frc/smartdashboard/SmartDashboard.h>
#include <wpi/raw_ostream.h> // for wpi outs()

Vision::Vision(){
    SetName("Vision");
    SetSubsystem("Vision");
}

void Vision::Periodic() {
    // Put code here to be run every loop
    //TODO photon::PhotonPipelineResult result = camera.GetLatestResult();
    //TODO bool hasTargets = result.HasTargets();
    //TODO frc::SmartDashboard::PutBoolean("Has AprilTag Targets", hasTargets);
    //TODO double yaw;
    //TODO double pitch;
    //TODO double area;
    //TODO double skew;
    //TODO int apriltagID;

    //TODO do we need? - Estimating Field Relative Pose with AprilTags      BROKEN        frc::Pose3d robotpose = photon::PhotonUtils::EstimateFieldToRobot(result.GetBestTarget().GetBestCameraToTarget(), frc::AprilTagFieldLayout::GetTagPose(result.GetBestTarget().GetFiducialId()), photon::PhotonUtils::EstimateFieldToRobot);

    //TODO if(hasTargets)
    //TODO {
    //TODO     photon::PhotonTrackedTarget target = result.GetBestTarget();
    //TODO     double yaw = target.GetYaw();
    //TODO     double pitch = target.GetPitch();
    //TODO     double area = target.GetArea();
    //TODO     double skew = target.GetSkew();
    //TODO     int apriltagID = target.GetFiducialId();

    //TODO     frc::SmartDashboard::PutNumber("AprilTag Yaw", yaw);
    //TODO     frc::SmartDashboard::PutNumber("AprilTag Pitch", pitch);
    //TODO     frc::SmartDashboard::PutNumber("AprilTag Area", area);
    //TODO     frc::SmartDashboard::PutNumber("AprilTag Skew", skew);
    //TODO     frc::SmartDashboard::PutNumber("AprilTag ID", apriltagID);

        //TODO do we need? it calculates distance to targer - we don't know camera height, target height, and camera pitch (1_m, 1_m, 1_rad)       units::meter_t range = photon::PhotonUtils::CalculateDistanceToTarget(1_m, 1_m, 1_rad, units::degree_t{result.GetBestTarget().GetPitch()});

    }

    //TODO else
    //TODO {
        //do nothing
    //TODO }
//TODO }

void Vision::SimulationPeriodic() {
}

// Put methods for controlling this subsystem here and call from commands

//void Vision::VisionScan(){ 
//        photon::PhotonPipelineResult result = camera.GetLatestResult();
//        photon::PhotonTrackedTarget target = result.GetBestTarget();
//        frc::SmartDashboard::PutBoolean("Photon HasTargets", result.HasTargets());
//} 
//
//void Vision::VisionTrack(){
//        VisionScan();
//        if (result.HasTargets()) {
//            frc::SmartDashboard::PutNumber("PhotonVision Target ID", target.GetFiducialId());
//        }
//}